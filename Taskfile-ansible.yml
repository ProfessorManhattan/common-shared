(function() {
  var template = Handlebars.template, templates = Handlebars.templates = Handlebars.templates || {};
Handlebars.partials['package.json'] = template({"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, helper, alias1=container.lambda, alias2=container.escapeExpression, alias3=depth0 != null ? depth0 : (container.nullContext || {}), alias4=container.hooks.helperMissing, alias5="function", lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "{\n  \"name\": \"@"
    + alias2(alias1(((stack1 = (depth0 != null ? lookupProperty(depth0,"profile") : depth0)) != null ? lookupProperty(stack1,"npmjs_organization") : stack1), depth0))
    + "/"
    + alias2(((helper = (helper = lookupProperty(helpers,"github_prefix") || (depth0 != null ? lookupProperty(depth0,"github_prefix") : depth0)) != null ? helper : alias4),(typeof helper === alias5 ? helper.call(alias3,{"name":"github_prefix","hash":{},"data":data,"loc":{"start":{"line":2,"column":43},"end":{"line":2,"column":60}}}) : helper)))
    + alias2(((helper = (helper = lookupProperty(helpers,"slug") || (depth0 != null ? lookupProperty(depth0,"slug") : depth0)) != null ? helper : alias4),(typeof helper === alias5 ? helper.call(alias3,{"name":"slug","hash":{},"data":data,"loc":{"start":{"line":2,"column":60},"end":{"line":2,"column":68}}}) : helper)))
    + "\",\n  \"description\": \""
    + alias2(((helper = (helper = lookupProperty(helpers,"description") || (depth0 != null ? lookupProperty(depth0,"description") : depth0)) != null ? helper : alias4),(typeof helper === alias5 ? helper.call(alias3,{"name":"description","hash":{},"data":data,"loc":{"start":{"line":3,"column":18},"end":{"line":3,"column":33}}}) : helper)))
    + "\",\n  \"license\": \""
    + alias2(((helper = (helper = lookupProperty(helpers,"license") || (depth0 != null ? lookupProperty(depth0,"license") : depth0)) != null ? helper : alias4),(typeof helper === alias5 ? helper.call(alias3,{"name":"license","hash":{},"data":data,"loc":{"start":{"line":4,"column":14},"end":{"line":4,"column":25}}}) : helper)))
    + "\",\n  \"author\": \""
    + alias2(alias1(((stack1 = (depth0 != null ? lookupProperty(depth0,"author") : depth0)) != null ? lookupProperty(stack1,"name") : stack1), depth0))
    + " <"
    + alias2(alias1(((stack1 = (depth0 != null ? lookupProperty(depth0,"author") : depth0)) != null ? lookupProperty(stack1,"email") : stack1), depth0))
    + "> ("
    + alias2(alias1(((stack1 = (depth0 != null ? lookupProperty(depth0,"link") : depth0)) != null ? lookupProperty(stack1,"home") : stack1), depth0))
    + ")\",\n  \"homepage\": \""
    + alias2(alias1(((stack1 = (depth0 != null ? lookupProperty(depth0,"link") : depth0)) != null ? lookupProperty(stack1,"home") : stack1), depth0))
    + "\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+"
    + alias2(((helper = (helper = lookupProperty(helpers,"repo") || (depth0 != null ? lookupProperty(depth0,"repo") : depth0)) != null ? helper : alias4),(typeof helper === alias5 ? helper.call(alias3,{"name":"repo","hash":{},"data":data,"loc":{"start":{"line":9,"column":16},"end":{"line":9,"column":24}}}) : helper)))
    + ".git\"\n  },\n  \"bugs\": {\n    \"email\": \""
    + alias2(alias1(((stack1 = (depth0 != null ? lookupProperty(depth0,"email") : depth0)) != null ? lookupProperty(stack1,"help") : stack1), depth0))
    + "\",\n    \"url\": \""
    + alias2(((helper = (helper = lookupProperty(helpers,"repo") || (depth0 != null ? lookupProperty(depth0,"repo") : depth0)) != null ? helper : alias4),(typeof helper === alias5 ? helper.call(alias3,{"name":"repo","hash":{},"data":data,"loc":{"start":{"line":13,"column":12},"end":{"line":13,"column":20}}}) : helper)))
    + alias2(alias1(((stack1 = ((stack1 = (depth0 != null ? lookupProperty(depth0,"repository") : depth0)) != null ? lookupProperty(stack1,"location") : stack1)) != null ? lookupProperty(stack1,"issues") : stack1), depth0))
    + "\"\n  },\n  \"version\": \"0.0.1\",\n  \"scripts\": {\n    \"commit\": \"git-cz\",\n    \"fix:prettier\": \"prettier --write . && prettier-package-json --write package.json\",\n    \"fix:shellcheck\": \"find . -type d \\\\( -name .cache -o -name .git -o -name .modules  -o -name node_modules -o -name .husky -o -name venv \\\\) -prune -o -type f \\\\( -name \\\\*.sh -o -name \\\\*.sh.j2 \\\\) -print0 | xargs -0 shellcheck -f diff | git apply\",\n    \"info\": \"npm-scripts-info\",\n    \"postinstall\": \"if [ -d .git ]; then husky install; fi\",\n    \"lint:prettier\": \"prettier --list-different .\",\n    \"lint:shellcheck\": \"find . -type d \\\\( -name .cache -o -name .git -o -name .modules  -o -name node_modules -o -name .husky -o -name venv \\\\) -prune -o -type f \\\\( -name \\\\*.sh -o -name \\\\*.sh.j2 \\\\) -print0 | xargs -0 -r -n1 shellcheck\",\n    \"lint-staged\": \"lint-staged\",\n    \"misc:markdown-links\": \"find . -type d \\\\( -name .cache -o -name .git -o -name .github -o -name .gitlab -o -name .modules  -o -name node_modules \\\\) -prune -o -type f \\\\( -name \\\\*.md \\\\) -print0 | xargs -0 -r -n1 markdown-link-check\",\n    \"version\": \"standard-version --no-verify\"\n  },\n  \"config\": {\n    \"commitizen\": {\n      \"path\": \"cz-conventional-changelog\"\n    }\n  },\n  \"devDependencies\": {\n    \"@megabytelabs/prettier-config\": \"^1.0.0\",\n    \"cspell\": \"^5.6.6\",\n    \"cz-conventional-changelog\": \"^3.3.0\",\n    \"husky\": \"^6.0.0\",\n    \"lint-staged\": \"^11.0.0\",\n    \"markdown-link-check\": \"^3.8.7\",\n    \"prettier\": \"^2.3.1\",\n    \"prettier-package-json\": \"^2.6.0\",\n    \"prettier-plugin-sh\": \"^0.6.1\",\n    \"shellcheck\": \"^1.0.0\",\n    \"standard-version\": \"^9.3.0\"\n  },\n  \"engines\": {\n    \"node\": \">=10\"\n  },\n  \"funding\": [\n    {\n      \"type\": \"opencollective\",\n      \"url\": \""
    + alias2(alias1(((stack1 = (depth0 != null ? lookupProperty(depth0,"profile_link") : depth0)) != null ? lookupProperty(stack1,"opencollective") : stack1), depth0))
    + "/"
    + alias2(alias1(((stack1 = (depth0 != null ? lookupProperty(depth0,"profile") : depth0)) != null ? lookupProperty(stack1,"opencollective") : stack1), depth0))
    + "\"\n    },\n    {\n      \"type\": \"patreon\",\n      \"url\": \""
    + alias2(alias1(((stack1 = (depth0 != null ? lookupProperty(depth0,"profile_link") : depth0)) != null ? lookupProperty(stack1,"patreon") : stack1), depth0))
    + "/"
    + alias2(alias1(((stack1 = (depth0 != null ? lookupProperty(depth0,"profile") : depth0)) != null ? lookupProperty(stack1,"patreon") : stack1), depth0))
    + "\"\n    }\n  ],\n  \"keywords\": [\n    \"megabytelabs\",\n    \"professormanhattan\"\n  ],\n  \"lint-staged\": {\n    \"**/*\": [\n      \"check-merge-conflict\",\n      \"check-added-large-files\",\n      \"check-case-conflict\",\n      \"check-docstring-first\",\n      \"check-executables-have-shebangs\",\n      \"check-symlinks\",\n      \"detect-private-key\"\n    ],\n    \"**/*.{js,json,md,ts,yml}\": [\n      \"prettier --write\"\n    ],\n    \"**/*.{js}\": [\n      \"npx standard --fix\"\n    ],\n    \"**/*.{sh,sh.j2}\": [\n      \"prettier --write\",\n      \"shellcheck\"\n    ],\n    \"**/*.xml\": [\n      \"check-xml\"\n    ],\n    \"**/*.yml\": [\n      \"check-yaml\",\n      \"yamllint -s\"\n    ],\n    \"package.json\": [\n      \"prettier-package-json --write\"\n    ],\n    \"requirements.txt\": [\n      \"requirements-txt-fixer\"\n    ],\n    \".gitlab-ci.yml\": [\n      \"npx gitlab-ci-lint\"\n    ]\n  },\n  \"prettier\": \"@megabytelabs/prettier-config\",\n  \"standard-version\": {\n    \"scripts\": {\n      \"prerelease\": \"git add --all\"\n    }\n  }\n}\n";
},"useData":true});
Handlebars.partials['Taskfile-ansible.yml.hbs'] = template({"1":function(container,depth0,helpers,partials,data) {
    return "\n  requirements:\n    desc: Install the Node.js, Python, and Ansible Galaxy package dependencies\n    deps: [requirements-nodejs, requirements-python,requirements-galaxy]\n\n  requirements-galaxy:\n    cmds:\n      - ansible-galaxy install -r requirements.yml\n    preconditions:\n      - sh: \"test -f requirements.yml\"\n        msg: \"The requirements.yml file is missing! It should be present even if it is empty (which should almost never be the case).\"\n";
},"3":function(container,depth0,helpers,partials,data) {
    return "\n  find-missing-files:\n    desc: Find roles that are missing files\n    summary: |\n      $ Find roles that are missing any given file\n\n      This task scans through all the folders in the roles/ directory and checks\n      for the presence of a file that you pass in through the CLI.\n\n      Example usage:\n      > task find-missing-files -- logo.png\n\n      The example above will look through all the folders two levels deep (e.g. ./roles/tools/nmap,\n      ./roles/system/snapd)in the roles folder and display any roles that are missing the file.\n    cmds:\n      - find ./roles -mindepth 2 -maxdepth 2 -type d '!' -exec test -e \"{}/{{.CLI_ARGS}}\" ';' -print\n    preconditions:\n      - sh: \"test -d roles\"\n        msg: \"The roles folder is missing. Is the project set up right?\"\n\n  symlink:\n    desc: Symlink all the roles in the roles/ folder to ~/.ansible/roles\n    summary: |\n      $ Symlink each role to ~/.ansible/roles/{{ namespace }}.{{ role_name }}\n\n      In the playbook, roles are sometimes referred to by their folder name and in other cases\n      they are referred to with their namespace prepended (e.g. professormanhattan.role_name).\n      This can cause issues so, in order for everything to work, each folder needs to be symlinked\n      to ~/.ansible/roles with the namespace prepended.\n    cmds:\n      - |\n        find ./roles -mindepth 2 -maxdepth 2 -type d -print0 | while read -d $'\\0' ROLE_PATH; do;\n          PATH_BASENAME=$(basename \"$ROLE_PATH\");\n          if [ ! -d \"~/.ansible/roles/$GALAXY_NAMESPACE.$PATH_BASENAME\" ]; then\n            ln -sf \"$PWD/$ROLE_PATH\" \"~/.ansible/roles/$GALAXY_NAMESPACE.$PATH_BASENAME\"\n          fi\n        done\n    sources:\n      - roles/*/*/\n    method: timestamp\n    preconditions:\n      - sh: \"test -d roles\"\n        msg: \"The roles folder is missing. Is the project set up right?\"\n";
},"5":function(container,depth0,helpers,partials,data) {
    return "\n  symlink:\n    desc: Symlink the current role to ~/.ansible/roles/{{GALAXY_NAMESPACE}}.{{GALAXY_ROLE_NAME}}\n    summary: |\n      $ Symlink this role to ~/.ansible/roles/{{ namespace }}.{{ role_name }}\n\n      Roles are sometimes referred to by their folder name (which ideally is also the role_name in\n      the meta/main.yml file) and they are sometimes referred to by their Ansible Galaxy name which\n      has the namespace prepended (e.g. professormanhattan.role_name). In order to make sure Ansible\n      can find the role in both cases, a symlink in ~/.ansible/roles that points to the folder needs\n      to be created.\n    cmds:\n      - mkdir -p \"$HOME/.ansible/roles\"\n      - rm -f \"$HOME/.ansible/roles/${GALAXY_NAMESPACE}.${GALAXY_ROLE_NAME}\"\n      - ln -s \"$PWD\" \"~/.ansible/roles/${GALAXY_NAMESPACE}.${GALAXY_ROLE_NAME}\"\n";
},"compiler":[8,">= 4.3.0"],"main":function(container,depth0,helpers,partials,data) {
    var stack1, alias1=depth0 != null ? depth0 : (container.nullContext || {}), lookupProperty = container.lookupProperty || function(parent, propertyName) {
        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {
          return parent[propertyName];
        }
        return undefined
    };

  return "---\nversion: '3'\n\ntasks:\n  fix:\n    desc: Apply automatic code formatting techniques (Prettier, Black, and Shellcheck)\n    deps: [fix-formatting, fix-python, fix-scripts]\n\n  lint:\n    desc: Lint the project by running all the linters in parallel (Ansible, Hadolint, Flake8, and YAML Lint)\n    deps: [lint:ansible, lint:docker, lint-python, lint-yaml]\n"
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"hbs") : depth0)) != null ? lookupProperty(stack1,"ansible") : stack1),{"name":"if","hash":{},"fn":container.program(1, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":12,"column":0},"end":{"line":24,"column":7}}})) != null ? stack1 : "")
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"hbs") : depth0)) != null ? lookupProperty(stack1,"playbook") : stack1),{"name":"if","hash":{},"fn":container.program(3, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":25,"column":0},"end":{"line":69,"column":7}}})) != null ? stack1 : "")
    + ((stack1 = lookupProperty(helpers,"if").call(alias1,((stack1 = (depth0 != null ? lookupProperty(depth0,"hbs") : depth0)) != null ? lookupProperty(stack1,"role") : stack1),{"name":"if","hash":{},"fn":container.program(5, data, 0),"inverse":container.noop,"data":data,"loc":{"start":{"line":70,"column":0},"end":{"line":86,"column":7}}})) != null ? stack1 : "");
},"useData":true});
})();