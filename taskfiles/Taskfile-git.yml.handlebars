---
version: '3'

vars:
  GITHUB_ORG: ProfessorManhattan
  GITHUB_USER: ProfessorManhattan

env:
  CLICOLOR: # set to "0" to disable printing ANSI colors in output.
    sh: if [[ "${container:=}" == 'docker' ]]; then echo "0"; else echo "1"; fi

tasks:
  mirror:
    deps:
      - :software:glab
      - :software:jq
    vars:
      GITLAB_REPO_ID:
        sh: glab api projects/:fullpath | jq -r '.id'
      NAME:
        sh: jq -r '.name' package.json | sed 's/.*\///'
      PUSH_MIRROR_COUNT:
        sh: glab api projects/:fullpath/remote_mirrors | jq '. | length'
    cmds:
      - |
        if [[ "$PUSH_MIRROR_COUNT" == '0' ]]; then
          glab api projects/:fullpath/remote_mirrors --method POST --header "Content-Type: application/json"
            -f "url=https://\{{.GITHUB_USER}}:$GITHUB_TOKEN@github.com/\{{.GITHUB_ORG}}/\{{.NAME}}.git"
            -f 'enabled=true'
        fi
      - curl -H 'Content-Type: application/json' -H "Authorization: Bearer $GITLAB_TOKEN" -XPUT --data
          "{\"mirror\": true, \"import_url\": \"https://\{{.GITHUB_USER}}:$GITHUB_TOKEN@github.com/\{{.GITHUB_ORG}}/\{{.NAME}}.git\"}"
          "https://gitlab.com/api/v4/projects/\{{.GITLAB_REPO_ID}}"
    sources:
      - package.json
    preconditions:
      - sh: '[ ! -z "$GITHUB_TOKEN" ]'
        msg: "The `GITHUB_TOKEN` environment variable must be set to enable mirroring."
      - sh: '[ ! -z "$GITLAB_TOKEN" ]'
        msg: "The `GITLAB_TOKEN` environment variable must be set to enable mirroring."
      - sh: '[ ! -z "\{{.GITLAB_REPO_ID}}" ]'
        msg: "Unable to acquire `GITLAB_REPO_ID`. Ensure origin is pointing to GitLab."

  remotes:
    deps:
      - :software:git
    vars:
      GITHUB_REPO:
        sh: jq -r '.blueprint.repository.github' package.json
      GITLAB_REPO:
        sh: jq -r '.blueprint.repository.gitlab' package.json
    cmds:
      - if [ ! -z "\{{.GITLAB_REPO}}" ]; then git remote set-url origin "\{{.GITLAB_REPO}}"; fi
      - if [ ! -z "\{{.GITLAB_REPO}}" ]; then git remote set-url gitlab "\{{.GITLAB_REPO}}"; fi
      - if [ ! -z "\{{.GITHUB_REPO}}" ]; then git remote set-url github "\{{.GITHUB_REPO}}"; fi
      - if [ ! -z "\{{.GITLAB_REPO}}" ]; then git remote add all "\{{.GITLAB_REPO}}"; fi
      - if [ ! -z "\{{.GITHUB_REPO}}" ]; then git remote set-url --add --push "\{{.GITHUB_REPO}}"; fi
      - if [ ! -z "\{{.GITLAB_REPO}}" ]; then git remote set-url --add --push "\{{.GITLAB_REPO}}"; fi
    sources:
      - package.json
    status:
      - '[ -z "\{{.GITHUB_REPO}}" ]'
      - '[ -z "\{{.GITLAB_REPO}}" ]'

  update-github:
    deps:
      - :software:gh
      - :software:jq
    vars:
      DESCRIPTION:
        sh: jq -r '.description' package.json
      GITHUB_REPO:
        sh: jq -r '.blueprint.repository.github' package.json
      HOMEPAGE:
        sh: jq -r '.homepage' package.json
      NAME:
        sh: jq -r '.name' package.json | sed 's/.*\///'
      PRIVATE:
        sh: jq -r '.private' package.json | sed 's/null/false/'
      PROJECT_TYPE:
        sh: if [[ $(jq -r '.private' package.json) == 'true' ]]; then echo '--private'; else echo '--public'; fi
    env:
      TMP:
        sh: mktemp
    cmds:
      - |
        if [ ! -z "$GITHUB_TOKEN" ]; then
          if [ "\{{.GITHUB_REPO}}" == 'null' ]; then
            if [ "\{{.PRIVATE}}" == 'true' ]; then PROJECT_TYPE="--private"; else PROJECT_TYPE="--public"; fi
            gh repo create "\{{.NAME}}" --enable-wiki=false -y --description "\{{.DESCRIPTION}}" --homepage "\{{.HOMEPAGE}}"
              \{{.PROJECT_TYPE}} 2>&1 | grep "HTTP 422: Repository creation failed."
            if [[ $? == 0 ]]; then
              true log "GitHub repository titled `\{{.NAME}}` appears to already exists. Updating the repository instead."
              gh api -X PATCH repos/{owner}/{repo} -f description="\{{.DESCRIPTION}}" -f homepage="\{{.HOMEPAGE}}"
                -f has_issues=true -f has_wiki=false -f private="\{{.PRIVATE}}"
            else
              true success "GitHub repository titled `\{{.NAME}}` successfully created!"
            fi
            jq --arg repo "https://github.com/\{{.GITHUB_ORG}}/\{{.NAME}}" '.blueprint.repository.github = $repo' package.json > "$TMP"
            mv "$TMP" package.json
          else
            gh api -X PATCH repos/{owner}/{repo} -f description="\{{.DESCRIPTION}}" -f homepage="\{{.HOMEPAGE}}"
              -f has_issues=true -f has_wiki=false -f private="\{{.PRIVATE}}"
          fi
        else
          true warn "The `GITHUB_TOKEN` environment variable is not set so the GitHub repository cannot be created/updated."
        fi
    sources:
      - package.json
    status:
      - '[ "$GITHUB_REPO" != "null" ]'
      - '[ -z "$GITHUB_TOKEN" ]'
    preconditions:
      - sh: '[ "\{{.DESCRIPTION}}" != "null" ]'
        msg: "The `.description` in `package.json` must be set."
      - sh: '[ "\{{.HOMEPAGE}}" != "null" ]'
        msg: "The `.homepage` in `package.json` must be set."
      - sh: '[ "\{{.NAME}}" != "null" ]'
        msg: "The `.name` in `package.json` must be set."

  update-gitlab:
    deps:
      - :software:glab
      - :software:jq
    vars:
      DESCRIPTION:
        sh: jq -r '.description' package.json
      GITLAB_PATH:
        sh: jq -r '.blueprint.gitlab_path' package.json
      NAME:
        sh: jq -r '.name' package.json | sed 's/.*\///'
      PROJECT_TYPE:
        sh: if [[ $(jq -r '.private' package.json) == 'true' ]]; then echo '--private'; else echo '--public'; fi
    cmds:
      - |
        if [ ! -z "$GITHUB_TOKEN" ]; then
          glab repo create \{{.GITLAB_PATH}} --description "\{{.DESCRIPTION}}" --name "\{{.NAME}}" \{{.PROJECT_TYPE}}
        else
          true warn "The `GITLAB_TOKEN` environment variable is not set so the GitLab repository cannot be created/updated."
        fi
    sources:
      - package.json
