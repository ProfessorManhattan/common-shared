---
version: '3'

output: interleaved

vars:
  DOCKERHUB_PROFILE: {{profile.dockerhub}}{{#eq group 'ansible'}}{{#eq subgroup 'role'}}
  GALAXY_NAMESPACE:
    sh: "if [ -f meta/main.yml ]; then grep namespace < meta/main.yml | sed 's/.*namespace: \\(.*\\)$/\\1/g'; fi"
  GALAXY_ROLE_NAME:
    sh: "if [ -f meta/main.yml ]; then grep role_name < meta/main.yml | sed 's/.*role_name: \\(.*\\)$/\\1/g'; fi"{{/eq}}{{/eq}}
  GITHUB_ORG: {{profile.github}}
  GITHUB_USER: {{profile.github}}
  IGNORE_FOLDERS: -path './.autodoc/*' -o -path './.cache/*' -o -path './.common*' -o -path './.config/*' -o -path './.git/*'
    -o -path './.github/*' -o -path './.gitlab/*' -o -path './.husky/*' -o -path './.modules/*' -o -path './.npm/*'
    -o -path './.pnpm-store/*' -o -path './.shared/*' -o -path './.task/*' -o -path './.venv/*' -o -path './.vscode/*'
    -o -path './build/*' -o -path './dist/*' -o -path './node_modules/*' -o -path './venv/*' -o -name pnpm-lock.yaml
    -o -name package-lock.json -o -name poetry.lock -o -name '.variables.json'
  INIT_SCRIPT: https://gitlab.com/megabyte-labs/common/shared/-/raw/master/common/.gitlab/ci/scripts/update-init.sh
  LOG_FIX:
    sh: chmod +x .config/log && echo "heyhey"
  NPM_KEEP_UPDATED: '@washingtondc/* eslint-config-strict-mode sleekfast'
  NPM_PROGRAM: npm
  NPM_PROGRAM_LOCAL: pnpm
  NPX_HANDLE: 'pnpx '
  NPX_PACKAGE: pnpx
  PYTHON_HANDLE:
    sh: if [ -z "$GITLAB_CI" ]; then echo 'poetry run '; fi
  REPOSITORY_SUBTYPE: {{subgroup}}
  REPOSITORY_TYPE: {{group}}
  TIMEZONE: America/New_York

includes:
{{#each (taskfileSort (glob './.config/taskfiles/**/*.yml'))}}
  {{remove (remove (remove (replace (remove this "./.config/taskfiles/") "/Taskfile-" ":") "/Taskfile.yml") "Taskfile-") ".yml"}}: {{this}}
{{/each}}

tasks:
  donothing: 'true'

  group:exec:
    desc: Execute group commands on any group (including repositories in sub-groups)
    cmds:
      - task: git:gitlab:group:exec

  init:
    desc: Ensures project is initialized with upstream files and migrates pre-existing projects
    cmds:
      - git init
      - |
        if [ -n "$GITLAB_CI" ]; then
          if [ -n "$UPDATE_INIT_SCRIPT" ]; then curl -s "$UPDATE_INIT_SCRIPT" | bash; fi
        else
          bash <(curl -s \{{.INIT_SCRIPT}})
        fi

  preload:
    deps:
      - install:brewfile
    desc: Set up your workstation in advance by installing commonly used programs
    summary: |
      # Speed up future development by preloading common system applications

      Just about every development task requires some sort of globally installed
      application. TypeScript requires Node.js to be installed. Ansible requires
      a handful of CLIs (and Python). This task will check for missing applications
      and install them globally. If you do not run this task, the routines will
      assume you want to keep the footprint small and use disposable virtual
      environments whenever possible (i.e. {{.NPX_PACKAGE}} in the case of Node.js,
      poetry in the case of Python, etc.).

      ## Reboot Requirements

      Some software that is installed, like VirtualBox and Docker, require reboots so
      it is recommended that you reboot after running this task.

      ## Passwordless Installation

      This installation method and all the methods we use will only prompt for a sudo
      password when absolutely necessary. If you already have common development tools
      it is possible that you will not even have to enter a sudo password. This is
      accomplished by installing to `$HOME/.local/bin` whenever a traditionally system
      level binary is installed. However, if you are missing something like git, then
      chances are you will be asked for a sudo password. In this case, we recommend
      you adopt the Megabyte Labs philosophy and inspect the code before running it.
    cmds:
      - |
        task install:modules:global &
        task install:pipx:global &
        wait
        .config/log success 'Successfully preloaded commonly used system applications'
        .config/log info 'Some software that requires a reboot may have been installed - rebooting would be prudent'

  prepare:
    desc: Prepares the project for the normal start command
    cmds:
      - task: boilerplate:check:package
      - task: boilerplate:clean

  scripts:
    interactive: true
    deps:
      - install:npm:ntl
    desc: Run and view descriptions for `npm scripts` via an interactive dialog
    cmds:
      - NTL_RUNNER=\{{.NPM_PROGRAM}} \{{.NPX_HANDLE}}ntl

  services:
    desc: Update elements of the repository that require API access
    summary: |
      # Update elements of the repository that require API access

      This task will ensure that the git repositories and other services related to the
      project are updated with the proper configurations. Requires that certain
      API keys be set.
    cmds:
      - task: common:update:services

  start:
    desc: Set up the project and refresh it with the latest changes
    summary: |
      # Set up the project

      This task will scaffold the project with the latest upstream changes
      and ensure your development environment has all the dependencies installed.

      **Example usage:**
      `task start`
    cmds:
      - task: {{#eq group "common"}}upstream:{{#eq subgroup "shared"}}shared{{else}}common{{/eq}}{{else}}{{#eq group "documentation"}}upstream:{{#eq subgroup "shared"}}commondocs{{else}}docs{{/eq}}{{else}}upstream:project{{/eq}}{{/eq}}
{{#eq group "ansible"}}
  test:
    interactive: true
    desc: Open an interactive dialog to select and run a Molecule test
    cmds:
      - task: ansible:test:prompt
{{/eq}}
